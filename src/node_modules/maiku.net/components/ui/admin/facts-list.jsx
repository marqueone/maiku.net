import React, { Component } from "react";
import PropTypes from "prop-types";

export default class FactList extends Component {
	state = {
		editing: null,
	};

	toggleEditing = itemId => {
		this.setState(() => ({
			editing: itemId,
		}));
	};

	handleEditField = event => {
		if (event.keyCode === 13) {
			const target = event.target;
			const update = {};

			update._id = this.state.editing;
			update[target.name] = target.value;

			this.handleUpdate(update);
		}
	};

	handleEditItem = () => {
		const itemId = this.state.editing;

		this.handleUpdate({
			_id: itemId,
			label: this.label.value,
			fact: this.fact.value,
		});
	};

	handleUpdate = update => {
		this.props.updateItem(update);
		this.setState(() => ({
			editing: null,
		}));
	};

	renderItemOrEdit = item => {
		const { removeItem } = this.props;

		if (this.state.editing === item._id) {
			return (
				<tr key={`editing-${item._id}`}>
					<td>
						<input
							onKeyDown={event => this.handleEditField(event)}
							type="text"
							className="form-control"
							ref={ref => {
								this.label = ref;
							}}
							name="label"
							defaultValue={item.label}
						/>
					</td>
					<td>
						<input
							onKeyDown={event => this.handleEditField(event)}
							type="text"
							className="form-control"
							ref={ref => {
								this.fact = ref;
							}}
							name="fact"
							defaultValue={item.fact}
						/>
					</td>
					<td style={{ width: "27%" }}>
						<button className="btn btn-default" onClick={() => this.handleEditItem()}>Update</button>
						&nbsp;
						<button className="btn btn-default" onClick={() => this.toggleEditing(null, false)}>
							Cancel
						</button>
					</td>
				</tr>
			);
		}
		return (
			<tr key={item._id} onClick={() => this.toggleEditing(item._id)}>
				<td>{item.label}</td>
				<td>{item.fact}</td>
				<td className="width-15">
					<button className="btn btn-default" onClick={() => removeItem(item)}>Remove</button>
				</td>
			</tr>
		);
	};

	render() {
		const { data } = this.props;

		return (
			<table className="table">
				<thead>
					<tr>
						<td>Label</td>
						<td>Fact</td>
						<td />
					</tr>
				</thead>
				<tbody>
					{data.map(item => this.renderItemOrEdit(item))}
				</tbody>
			</table>
		);
	}
}

FactList.propTypes = {
	data: PropTypes.arrayOf(
		PropTypes.shape({
			_id: PropTypes.string.isRequired,
			fact: PropTypes.string.isRequired,
			label: PropTypes.string.isRequired,
		}),
	).isRequired,
	removeItem: PropTypes.func.isRequired,
	updateItem: PropTypes.func.isRequired,
};

FactList.defaultProps = {
	data: [],
};
