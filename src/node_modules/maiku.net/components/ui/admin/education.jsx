import React, { Component } from "react";
import PropTypes from "prop-types";

import EducationList from "maiku.net/components/ui/admin/education-list";

const uuid = require("uuid/v4");

export default class Education extends Component {
	state = {
		isCompleted: false,
	};

	toggleCompleted = () => {
		this.setState(prevState => ({
			isCompleted: !prevState.isCompleted,
		}));
	};

	addEducation = event => {
		event.preventDefault();

		const education = {
			_id: uuid(),
			completed: this.state.isCompleted,
			school: this.school.value,
			start: this.start.value,
			end: this.end.value,
			program: this.program.value,
			description: this.description.value,
		};

		this.props.addItem(education);

		this.form.reset();
	};

	render() {
		const { data } = this.props;

		return (
			<div>
				<h5 className="font-accident-two-normal uppercase subtitle">Manage Education</h5>

				<div className="col-md-12">
					<div className="dividewhite2" />
					<div className="responsive-table">
						<EducationList
							data={data}
							removeItem={this.props.removeItem}
							updateItem={this.props.updateItem}
						/>
					</div>
				</div>

				<div className="col-md-12">
					<div className="dividewhite2" />
					<div className="responsive-table">
						<form
							className="wpcf7-form"
							onSubmit={event => this.addEducation(event)}
							ref={input => {
								this.form = input;
							}}
						>
							<div className="field">
								<input
									className="form-control"
									type="text"
									id="school"
									name="school"
									placeholder="School"
									required
									ref={input => {
										this.school = input;
									}}
								/>
							</div>

							<div className="form-inline">
								<div className="form-group" style={{ paddingRight: "10px" }}>
									<input
										className="form-control"
										type="text"
										id="start"
										name="start"
										placeholder="Start"
										required
										ref={input => {
											this.start = input;
										}}
									/>
								</div>
								<div className="form-group">
									<input
										className="form-control"
										type="text"
										id="end"
										name="end"
										placeholder="End"
										ref={input => {
											this.end = input;
										}}
									/>
								</div>

								<div className="form-group checkbox radio-inline">
									<input
										className="form-control"
										type="checkbox"
										id="completed"
										name="completed"
										onChange={this.toggleCompleted}
									/>

									<label htmlFor="completed">Completed? </label>
								</div>
							</div>

							<div className="field">
								<input
									className="form-control"
									type="text"
									id="program"
									name="program"
									placeholder="Program"
									required
									ref={input => {
										this.program = input;
									}}
								/>
							</div>

							<div className="field">
								<textarea
									className="form-control"
									type="text"
									id="description"
									name="description"
									placeholder="Description"
									required
									ref={input => {
										this.description = input;
									}}
								/>
							</div>

							<div className="field text-center">
								<button type="submit" className="btn btn-lg btn-darker">Add</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		);
	}
}

Education.propTypes = {
	data: PropTypes.arrayOf(
		PropTypes.shape({
			_id: PropTypes.string.isRequired,
			completed: PropTypes.bool.isRequired,
			description: PropTypes.string.isRequired,
			end: PropTypes.string,
			program: PropTypes.string.isRequired,
			school: PropTypes.string.isRequired,
			start: PropTypes.string.isRequired,
		}),
	),
	addItem: PropTypes.func.isRequired,
	removeItem: PropTypes.func.isRequired,
	updateItem: PropTypes.func.isRequired,
};

Education.defaultProps = {
	data: [],
};
