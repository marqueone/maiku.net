import React, { Component } from "react";
import PropTypes from "prop-types";

import { DragSource, DropTarget } from "react-dnd";

import { ItemTypes } from "maiku.net/components/ui/constants";

const informationSource = {
	beginDrag(props) {
		return {
			id: props.id,
			index: props.index,
		};
	},
	endDrag(props, monitor) {
		const dropIndex = monitor.getItem().index;
		const dragIndex = props.index;

		props.moveItem("info", dragIndex, dropIndex);
	},
};

const informationTarget = {
	drop(props, monitor) {
		const dragIndex = monitor.getItem().index;
		const dropIndex = props.index;

		// Don't replace items with themselves
		if (dragIndex === dropIndex) {
			return;
		}

		monitor.getItem().index = dropIndex;
	},
};

class Information extends Component {
	state = {
		editing: null,
	};

	toggleEditing = itemId => {
		this.setState(() => ({
			editing: itemId,
		}));
	};

	handleEditField = event => {
		if (event.keyCode === 13) {
			const target = event.target;
			const update = {};

			update._id = this.state.editing;
			update[target.name] = target.value;

			this.handleUpdate(update);
		}
	};

	handleEditItem = () => {
		const itemId = this.state.editing;

		this.handleUpdate({
			_id: itemId,
			value: this.value.value,
		});
	};

	handleUpdate = update => {
		this.props.update("info", update);
		this.setState(() => ({
			editing: null,
		}));
	};

	renderEdit = item => (
		<li key={item._id}>
			<div className="row" style={{ padding: "8px", borderTop: "1px solid rgb(221, 221, 221)" }}>
				<div className="col-md-9">
					<input
						onKeyDown={event => this.handleEditField(event)}
						type="text"
						className="form-control"
						ref={ref => {
							this.label = ref;
						}}
						name="label"
						defaultValue={item.value}
					/>
				</div>
				<div className="col-md-3" style={{ textAlign: "right" }}>
					<button className="btn btn-default" onClick={() => this.handleEditItem()}>Update</button>
					&nbsp;
					<button className="btn btn-default" onClick={() => this.toggleEditing(null, false)}>
						Cancel
					</button>
				</div>
			</div>
		</li>
	);

	render() {
		const { item, remove, connectDragSource, connectDropTarget } = this.props;

		if (this.state.editing === item._id) {
			return this.renderEdit(item);
		}

		return connectDragSource(
			connectDropTarget(
				<li key={item._id} onClick={() => this.toggleEditing(item._id)}>
					<div className="row" style={{ padding: "8px", borderTop: "1px solid rgb(221, 221, 221)" }}>
						<div className="col-md-9">{item.value}</div>
						<div className="col-md-3" style={{ textAlign: "right" }}>
							<button className="btn btn-default" onClick={() => remove("info", item)}>Remove</button>
						</div>
					</div>
				</li>,
			),
		);
	}
}

Information = DropTarget(ItemTypes.INFORMATION, informationTarget, connect => ({
	connectDropTarget: connect.dropTarget(),
}))(Information);
Information = DragSource(ItemTypes.INFORMATION, informationSource, (connect, monitor) => ({
	connectDragSource: connect.dragSource(),
	isDragging: monitor.isDragging(),
}))(Information);

Information.propTypes = {
	item: PropTypes.shape({
		_id: PropTypes.string.isRequired,
		value: PropTypes.string.isRequired,
	}).isRequired,
	remove: PropTypes.func.isRequired,
	update: PropTypes.func.isRequired,
	connectDragSource: PropTypes.func,
	connectDropTarget: PropTypes.func,
};

Information.defaultProps = {
	connectDragSource: () => {},
	connectDropTarget: () => {},
};

export default Information;
