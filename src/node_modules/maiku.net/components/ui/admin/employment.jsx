import React, { PureComponent } from "react";
import PropTypes from "prop-types";

import EmployerList from "maiku.net/components/ui/admin/employer-list";

const uuid = require("uuid/v4");

export default class Employment extends PureComponent {
	addEmployer = event => {
		event.preventDefault();

		this.props.add("employment", {
			_id: uuid(),
			current: this.end.value === "",
			company: this.company.value,
			start: this.start.value,
			end: this.end.value,
			position: this.position.value,
			description: this.description.value,
		});

		this.form.reset();
	};

	render() {
		const { data, remove, update, addProject, removeProject, updateProject, moveItem } = this.props;

		return (
			<div>
				<h5 className="font-accident-two-normal uppercase subtitle">Manage Employment</h5>

				<div className="col-md-12">
					<div className="dividewhite2" />
					<div className="responsive-table">
						<EmployerList
							data={data}
							remove={remove}
							update={update}
							addProject={addProject}
							removeProject={removeProject}
							updateProject={updateProject}
							moveItem={moveItem}
						/>
					</div>
				</div>

				<div className="col-md-12">
					<div className="dividewhite2" />
					<div className="responsive-table">
						<form
							className="wpcf7-form"
							onSubmit={event => this.addEmployer(event)}
							ref={input => {
								this.form = input;
							}}
						>
							<div className="field">
								<input
									className="form-control"
									type="text"
									id="company"
									name="company"
									placeholder="Employer"
									required
									ref={input => {
										this.company = input;
									}}
								/>
							</div>

							<div className="form-inline">
								<div className="form-group" style={{ paddingRight: "10px" }}>
									<input
										className="form-control"
										type="text"
										id="start"
										name="start"
										placeholder="Start"
										required
										ref={input => {
											this.start = input;
										}}
									/>
								</div>
								<div className="form-group">
									<input
										className="form-control"
										type="text"
										id="end"
										name="end"
										placeholder="End"
										ref={input => {
											this.end = input;
										}}
									/>
								</div>
							</div>

							<div className="field">
								<input
									className="form-control"
									type="text"
									id="position"
									name="position"
									placeholder="Position"
									required
									ref={input => {
										this.position = input;
									}}
								/>
							</div>

							<div className="field">
								<textarea
									className="form-control"
									type="text"
									id="description"
									name="description"
									placeholder="Description"
									required
									ref={input => {
										this.description = input;
									}}
								/>
							</div>

							<div className="field text-center">
								<button type="submit" className="btn btn-lg btn-darker">Add</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		);
	}
}

Employment.propTypes = {
	data: PropTypes.arrayOf(
		PropTypes.shape({
			_id: PropTypes.string.isRequired,
			company: PropTypes.string.isRequired,
			current: PropTypes.bool.isRequired,
			description: PropTypes.string.isRequired,
			end: PropTypes.string,
			position: PropTypes.string.isRequired,
			start: PropTypes.string.isRequired,
		}),
	).isRequired,
	add: PropTypes.func.isRequired,
	remove: PropTypes.func.isRequired,
	update: PropTypes.func.isRequired,
	moveItem: PropTypes.func.isRequired,
	addProject: PropTypes.func,
	removeProject: PropTypes.func,
	updateProject: PropTypes.func,
};

Employment.defaultProps = {
	data: [],
	addProject: () => {},
	removeProject: () => {},
	updateProject: () => {},
};
