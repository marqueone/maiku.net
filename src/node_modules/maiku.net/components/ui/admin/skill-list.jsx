import React, { PureComponent } from "react";
import PropTypes from "prop-types";

export default class SkillList extends PureComponent {
	state = {
		editing: null,
	};

	toggleEditing = itemId => {
		this.setState(() => ({
			editing: itemId,
		}));
	};

	handleEditField = event => {
		if (event.keyCode === 13) {
			const target = event.target;
			const update = {};

			update._id = this.state.editing;
			update[target.name] = target.value;

			this.handleSkillUpdate(update);
		}
	};

	handleEditTypeField = event => {
		const target = event.target;
		const update = {};

		update._id = this.state.editing;
		update[target.name] = target.value;

		this.handleSkillUpdate(update);
	};

	handleEditItem = () => {
		const itemId = this.state.editing;

		this.handleSkillUpdate({
			_id: itemId,
			type: this.type.value,
			name: this.name.value,
			level: this.proficiancy.value,
		});
	};

	handleSkillUpdate = update => {
		this.props.updateSkill(update);
		this.setState(() => ({
			editing: null,
		}));
	};

	removeSkill = skill => {
		this.props.removeSkill(skill);
	};

	renderItemOrEditField = item => {
		if (this.state.editing === item._id) {
			return (
				<tr key={`editing-${item._id}`}>
					<td>
						<select
							className="form-control"
							ref={ref => {
								this.type = ref;
							}}
							value={item.type}
							onChange={event => this.handleEditTypeField(event)}
							name="type"
						>
							<option value="language">Language</option>
							<option value="framework">Framework</option>
							<option value="software">Software</option>
							<option value="os">Operating System</option>
						</select>
					</td>
					<td>
						<input
							onKeyDown={event => this.handleEditField(event)}
							type="text"
							className="form-control"
							ref={ref => {
								this.name = ref;
							}}
							name="name"
							defaultValue={item.name}
						/>
					</td>
					<td>
						<input
							onKeyDown={event => this.handleEditField(event)}
							type="number"
							className="form-control"
							ref={ref => {
								this.proficiancy = ref;
							}}
							name="proficiancy"
							defaultValue={item.level}
						/>
					</td>
					<td>
						<button className="btn btn-default" onClick={() => this.handleEditItem()}>Update</button>
					</td>
				</tr>
			);
		}
		return (
			<tr key={item._id} onClick={() => this.toggleEditing(item._id)}>
				<td>{item.type}</td>
				<td>{item.name}</td>
				<td>{item.level}</td>
				<td>
					<button className="btn btn-default" onClick={() => this.removeSkill(item)}>remove</button>
				</td>
			</tr>
		);
	};

	render() {
		const { skills } = this.props;

		return (
			<table className="table">
				<thead>
					<tr>
						<td className="width-20">Skill Type</td>
						<td>Name</td>
						<td className="width-15">Proficiancy</td>
						<td className="width-15" />
					</tr>
				</thead>
				<tbody>
					{skills.map(skill => this.renderItemOrEditField(skill))}
				</tbody>
			</table>
		);
	}
}

SkillList.propTypes = {
	skills: PropTypes.arrayOf(PropTypes.shape({})).isRequired,
	removeSkill: PropTypes.func.isRequired,
	updateSkill: PropTypes.func.isRequired,
};

SkillList.defaultProps = {
	skills: [],
};
