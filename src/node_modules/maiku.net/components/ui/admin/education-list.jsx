import React, { Component } from "react";
import PropTypes from "prop-types";

export default class EducationList extends Component {
	state = {
		editing: null,
		isCompleted: false,
	};

	toggleEditing = (itemId, isCompleted) => {
		this.setState(() => ({
			editing: itemId,
			isCompleted,
		}));
	};

	toggleCompleted = () => {
		this.setState(() => ({
			editing: null,
			isCompleted: true,
		}));
	};

	handleEditField = event => {
		if (event.keyCode === 13) {
			const target = event.target;
			const update = {};

			update._id = this.state.editing;
			update[target.name] = target.value;

			this.handleUpdate(update);
		}
	};

	handleEditItem = () => {
		const itemId = this.state.editing;

		this.handleUpdate({
			_id: itemId,
			completed: this.state.isCompleted,
			school: this.school.value,
			start: this.start.value,
			end: this.end.value,
			program: this.program.value,
			description: this.description.value,
		});
	};

	handleUpdate = update => {
		this.props.update("education", update);
		this.setState(() => ({
			editing: null,
			isCompleted: false,
		}));
	};

	renderItemOrEdit = item => {
		const { remove } = this.props;

		if (this.state.editing === item._id) {
			return (
				<tr key={item._id} className="wpcf7-form">
					<td>
						<div className="field">
							<input
								className="form-control"
								type="text"
								id="school"
								name="school"
								placeholder="School"
								required
								ref={ref => {
									this.school = ref;
								}}
								defaultValue={item.school}
							/>
						</div>

						<div className="form-inline">
							<div className="form-group" style={{ paddingRight: "10px" }}>
								<input
									className="form-control"
									type="text"
									id="start"
									name="start"
									placeholder="Start"
									required
									ref={ref => {
										this.start = ref;
									}}
									defaultValue={item.start}
								/>
							</div>
							<div className="form-group">
								<input
									className="form-control"
									type="text"
									id="end"
									name="end"
									placeholder="End"
									ref={ref => {
										this.end = ref;
									}}
									defaultValue={item.end}
								/>
							</div>

							<div className="form-group checkbox radio-inline">
								<input
									className="form-control"
									type="checkbox"
									id="completed"
									name="completed"
									onChange={this.toggleCompleted}
									checked={this.state.isCompleted}
								/>

								<label htmlFor="completed">Completed? </label>
							</div>
						</div>

						<div className="field">
							<input
								className="form-control"
								type="text"
								id="program"
								name="program"
								placeholder="Program"
								required
								ref={ref => {
									this.program = ref;
								}}
								defaultValue={item.program}
							/>
						</div>

						<div className="field">
							<textarea
								type="text"
								className="form-control"
								ref={ref => {
									this.description = ref;
								}}
								name="description"
								defaultValue={item.description}
							/>
						</div>
					</td>
					<td style={{ width: "27%" }}>
						<button className="btn btn-default" onClick={() => this.handleEditItem()}>Update</button>
						&nbsp;
						<button className="btn btn-default" onClick={() => this.toggleEditing(null, false)}>
							Cancel
						</button>
					</td>
				</tr>
			);
		}

		return (
			<tr key={item._id}>
				<td onClick={() => this.toggleEditing(item._id, item.completed)}>{item.school}</td>
				<td className="width-15">
					<button className="btn btn-default" onClick={() => remove("education", item)}>Remove</button>
				</td>
			</tr>
		);
	};

	render() {
		const { data } = this.props;

		return (
			<table className="table">
				<thead>
					<tr>
						<td>School</td>
						<td />
					</tr>
				</thead>
				<tbody>
					{data.map(item => this.renderItemOrEdit(item))}
				</tbody>
			</table>
		);
	}
}

EducationList.propTypes = {
	data: PropTypes.arrayOf(
		PropTypes.shape({
			_id: PropTypes.string.isRequired,
			completed: PropTypes.bool.isRequired,
			description: PropTypes.string.isRequired,
			end: PropTypes.string,
			program: PropTypes.string.isRequired,
			school: PropTypes.string.isRequired,
			start: PropTypes.string.isRequired,
		}),
	),
	remove: PropTypes.func.isRequired,
	update: PropTypes.func.isRequired,
};

EducationList.defaultProps = {
	data: [],
};
