import React, { Component } from "react";
import PropTypes from "prop-types";

export default class EducationList extends Component {
    state = {
        editing: null,
        isCompleted: false
    }

    toggleEditing = (itemId, isCompleted) => {
        console.log(isCompleted)
        this.setState((prevState, props) => { prevState.editing = itemId; prevState.isCompleted = isCompleted })
    }

    toggleCompleted = () => {
        this.setState((prevState, props) => { prevState.isCompleted = !prevState.isCompleted })
    }

    handleEditField = event => {
        if (event.keyCode === 13) {
            const target = event.target;
            let update = {};

            update._id = this.state.editing;
            update[target.name] = target.value;

            this.handleUpdate(update);
        }
    }

    handleEditItem = () => {
        let itemId = this.state.editing;

        this.handleUpdate({
            _id: itemId,
            completed: this.state.isCompleted,
            school: this.refs[`school_${itemId}`].value,
            start: this.refs[`start_${itemId}`].value,
            end: this.refs[`end_${itemId}`].value,
            program: this.refs[`program_${itemId}`].value,
            description: this.refs[`description_${itemId}`].value
        });
    }

    handleUpdate = (update) => {
        this.props.updateItem(update);
        this.setState((prevState, props) => { prevState.editing = null; prevState.isCompleted = false; })
    }

    removeItem = item => {
        this.props.removeItem(item);
    }

    renderItemOrEdit = item => {
        const { removeItem } = this.props;

        if (this.state.editing === item._id) {
            return (<tr
                key={item._id}
                className="wpcf7-form"
            >
                <td>
                    <div className="field">
                        <input
                            className="form-control"
                            type="text"
                            id="school"
                            name="school"
                            placeholder="School"
                            required
                            ref={`school_${item._id}`}
                            defaultValue={item.school}
                        />
                    </div>

                    <div className="form-inline">
                        <div className="form-group" style={{ paddingRight: "10px" }}>
                            <input
                                className="form-control"
                                type="text"
                                id="start"
                                name="start"
                                placeholder="Start"
                                required
                                ref={`start_${item._id}`}
                                defaultValue={item.start}
                            />
                        </div>
                        <div className="form-group">
                            <input
                                className="form-control"
                                type="text"
                                id="end"
                                name="end"
                                placeholder="End"
                                ref={`end_${item._id}`}
                                defaultValue={item.end}
                            />
                        </div>

                        <div className="form-group checkbox radio-inline">
                            <input
                                className="form-control"
                                type="checkbox"
                                id="completed"
                                name="completed"
                                onChange={this.toggleCompleted}
                                checked={this.state.isCompleted}
                            />

                            <label>Completed? </label>
                        </div>
                    </div>

                    <div className="field">
                        <input
                            className="form-control"
                            type="text"
                            id="program"
                            name="program"
                            placeholder="Program"
                            required
                            ref={`program_${item._id}`}
                            defaultValue={item.program}
                        />
                    </div>

                    <div className="field">
                        <textarea
                            type="text"
                            className="form-control"
                            ref={`description_${item._id}`}
                            name="description"
                            defaultValue={item.description}
                        >
                        </textarea>
                    </div>
                </td>
                <td style={{ width: "27%" }}>
                    <button
                        className="btn btn-default"
                        onClick={() => this.handleEditItem()}
                    >Update</button>
                    &nbsp;
                    <button
                        className="btn btn-default"
                        onClick={() => this.toggleEditing(null, false)}
                    >Cancel</button>
                </td>
            </tr>);
        } else {
            return (<tr
                key={item._id}
            >
                <td
                    onClick={() => this.toggleEditing(item._id, item.completed)}
                >{item.school}</td>
                <td className="width-15">
                    <button
                        className="btn btn-default"
                        onClick={() => removeItem(item)}
                    >Remove</button></td>
            </tr>);
        }
    }

    render() {
        const { data } = this.props;

        return (
            <table className="table">
                <thead>
                    <tr>
                        <td>School</td>
                        <td></td>
                    </tr>
                </thead>
                <tbody>
                    {data.map(item => { return this.renderItemOrEdit(item); })}
                </tbody>
            </table>
        );
    }
}

EducationList.propTypes = { 
    data: PropTypes.arrayOf(PropTypes.shape({
        _id: PropTypes.string.isRequired,
        completed: PropTypes.bool.isRequired,
        description: PropTypes.string.isRequired,
        end: PropTypes.string,
        program: PropTypes.string.isRequired,
        school: PropTypes.string.isRequired,
        start: PropTypes.string.isRequired,
    })),
    removeItem: PropTypes.func.isRequired,
    updateItem: PropTypes.func.isRequired,
}

EducationList.defaultProps = { 
    data: [],
}