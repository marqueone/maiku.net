import React, { Component } from "react";
import PropTypes from "prop-types";

import { DragSource, DropTarget } from "react-dnd";

import { ItemTypes } from "maiku.net/components/ui/constants";

const schoolSource = {
	beginDrag(props) {
		return {
			id: props.id,
			index: props.index,
		};
	},
	endDrag(props, monitor) {
		const dropIndex = monitor.getItem().index;
		const dragIndex = props.index;

		props.moveItem("education", dragIndex, dropIndex);
	},
};

const schoolTarget = {
	drop(props, monitor) {
		const dragIndex = monitor.getItem().index;
		const dropIndex = props.index;

		if (dragIndex === dropIndex) {
			return;
		}

		monitor.getItem().index = dropIndex;
	},
};

class School extends Component {
	state = {
		editing: null,
		isCompleted: false,
	};

	toggleEditing = (itemId, isCompleted) => {
		this.setState(() => ({
			editing: itemId,
			isCompleted,
		}));
	};

	toggleCompleted = () => {
		this.setState(() => ({
			editing: null,
			isCompleted: true,
		}));
	};

	handleEditField = event => {
		if (event.keyCode === 13) {
			const target = event.target;
			const update = {};

			update._id = this.state.editing;
			update[target.name] = target.value;

			this.handleUpdate(update);
		}
	};

	handleEditItem = () => {
		const itemId = this.state.editing;

		this.handleUpdate({
			_id: itemId,
			completed: this.state.isCompleted,
			school: this.school.value,
			start: this.start.value,
			end: this.end.value,
			program: this.program.value,
			description: this.description.value,
		});
	};

	handleUpdate = update => {
		this.props.update("education", update);
		this.setState(() => ({
			editing: null,
			isCompleted: false,
		}));
	};

	renderEdit = item => (
		<li key={item._id}>
			<div className="row" style={{ padding: "8px", borderTop: "1px solid rgb(221, 221, 221)" }}>
				<div className="col-md-9">
					<div className="field">
						<input
							className="form-control"
							type="text"
							id="school"
							name="school"
							placeholder="School"
							required
							ref={ref => {
								this.school = ref;
							}}
							defaultValue={item.school}
						/>
					</div>

					<div className="form-inline">
						<div className="form-group" style={{ paddingRight: "10px" }}>
							<input
								className="form-control"
								type="text"
								id="start"
								name="start"
								placeholder="Start"
								required
								ref={ref => {
									this.start = ref;
								}}
								defaultValue={item.start}
							/>
						</div>
						<div className="form-group">
							<input
								className="form-control"
								type="text"
								id="end"
								name="end"
								placeholder="End"
								ref={ref => {
									this.end = ref;
								}}
								defaultValue={item.end}
							/>
						</div>

						<div className="form-group checkbox radio-inline">
							<input
								className="form-control"
								type="checkbox"
								id="completed"
								name="completed"
								onChange={this.toggleCompleted}
								checked={this.state.isCompleted}
							/>

							<label htmlFor="completed">Completed? </label>
						</div>
					</div>

					<div className="field">
						<input
							className="form-control"
							type="text"
							id="program"
							name="program"
							placeholder="Program"
							required
							ref={ref => {
								this.program = ref;
							}}
							defaultValue={item.program}
						/>
					</div>

					<div className="field">
						<textarea
							type="text"
							className="form-control"
							ref={ref => {
								this.description = ref;
							}}
							name="description"
							defaultValue={item.description}
						/>
					</div>
				</div>
				<div className="col-md-3" style={{ textAlign: "right" }}>
					<button className="btn btn-default" onClick={() => this.handleEditItem()}>Update</button>
					&nbsp;
					<button className="btn btn-default" onClick={() => this.toggleEditing(null, false)}>
						Cancel
					</button>
				</div>
			</div>
		</li>
	);

	render() {
		const { item, remove, connectDragSource, connectDropTarget } = this.props;

		if (this.state.editing === item._id) {
			return this.renderEdit(item);
		}

		return connectDragSource(
			connectDropTarget(
				<li key={item._id} onClick={() => this.toggleEditing(item._id, false)}>
					<div className="row" style={{ padding: "8px", borderTop: "1px solid rgb(221, 221, 221)" }}>
						<div className="col-md-9">{item.school}</div>
						<div className="col-md-3" style={{ textAlign: "right" }}>
							<button className="btn btn-default" onClick={() => remove("education", item)}>
								Remove
							</button>
						</div>
					</div>
				</li>,
			),
		);
	}
}

School = DropTarget(ItemTypes.EDUCATION, schoolTarget, connect => ({
	connectDropTarget: connect.dropTarget(),
}))(School);
School = DragSource(ItemTypes.EDUCATION, schoolSource, (connect, monitor) => ({
	connectDragSource: connect.dragSource(),
	isDragging: monitor.isDragging(),
}))(School);

School.propTypes = {
	item: PropTypes.shape({
		_id: PropTypes.string.isRequired,
		completed: PropTypes.bool.isRequired,
		description: PropTypes.string.isRequired,
		end: PropTypes.string,
		program: PropTypes.string.isRequired,
		school: PropTypes.string.isRequired,
		start: PropTypes.string.isRequired,
	}).isRequired,
	remove: PropTypes.func.isRequired,
	update: PropTypes.func.isRequired,
	connectDragSource: PropTypes.func,
	connectDropTarget: PropTypes.func,
};

School.defaultProps = {
	connectDragSource: () => {},
	connectDropTarget: () => {},
};

export default School;
