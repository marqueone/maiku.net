import React, { Component } from "react";
import PropTypes from "prop-types";

export default class EmployerList extends Component {
	state = {
		editing: null,
	};

	toggleEditing = itemId => {
		this.setState(() => ({
			editing: itemId,
		}));
	};

	handleEditField = event => {
		if (event.keyCode === 13) {
			const target = event.target;
			const update = {};

			update._id = this.state.editing;
			update[target.name] = target.value;

			this.handleUpdate(update);
		}
	};

	handleEditItem = () => {
		const itemId = this.state.editing;

		this.handleUpdate({
			_id: itemId,
			current: this.start.value === "",
			company: this.company.value,
			start: this.start.value,
			end: this.end.value,
			position: this.position.value,
			description: this.description.value,
		});
	};

	handleUpdate = update => {
		this.props.updateItem(update);
		this.setState(() => ({
			editing: null,
		}));
	};

	toggleAddProject = item => {
		console.log(item, "add project");
	};

	removeEmployer = item => {
		this.props.removeItem(item);
	};

	renderItemOrEdit = item => {
		const { removeItem } = this.props;

		if (this.state.editing === item._id) {
			return (
				<tr key={`editing-${item._id}`} className="wpcf7-form">
					<td>
						<div className="field">
							<input
								onKeyDown={event => this.handleEditField(event)}
								type="text"
								className="form-control"
								ref={ref => { this.company = ref; }}
								name="company"
								defaultValue={item.company}
							/>
						</div>

						<div className="form-inline">
							<div className="form-group" style={{ paddingRight: "10px" }}>
								<input
									onKeyDown={event => this.handleEditField(event)}
									type="text"
									className="form-control"
									ref={ref => { this.start = ref; }}
									name="start"
									defaultValue={item.start}
								/>
							</div>
							<div className="form-group">
								<input
									onKeyDown={event => this.handleEditField(event)}
									type="text"
									className="form-control"
									ref={ref => { this.end = ref; }}
									name="end"
									defaultValue={item.end}
								/>
							</div>
						</div>

						<div className="field">
							<input
								onKeyDown={event => this.handleEditField(event)}
								type="text"
								className="form-control"
								ref={ref => { this.position = ref; }}
								name="position"
								defaultValue={item.position}
							/>
						</div>

						<div className="field">
							<textarea
								type="text"
								className="form-control"
								ref={ref => { this.description = ref; }}
								name="description"
								defaultValue={item.description}
							/>
						</div>
					</td>
					<td>
						<button className="btn btn-default" onClick={() => this.handleEditItem()}>Update</button>
						&nbsp;
						<button className="btn btn-default" onClick={() => this.toggleEditing(null)}>Cancel</button>
					</td>
				</tr>
			);
		}

		return (
			<tr key={item._id}>
				<td onClick={() => this.toggleEditing(item._id)}>{item.company}</td>
				<td>
					<button className="btn btn-default" onClick={() => this.toggleAddProject(item._id)}>
						Add Project
					</button>{" "}
					&nbsp;
					<button className="btn btn-default" onClick={() => removeItem(item)}>Remove</button>
				</td>
			</tr>
		);
	};

	render() {
		const { data } = this.props;

		return (
			<table className="table">
				<thead>
					<tr>
						<td>Employer</td>
						<td style={{ width: "27%" }} />
					</tr>
				</thead>
				<tbody>
					{data.map(item => this.renderItemOrEdit(item))}
				</tbody>
			</table>
		);
	}
}
EmployerList.propTypes = {
	data: PropTypes.arrayOf(
		PropTypes.shape({
			_id: PropTypes.string.isRequired,
			company: PropTypes.string.isRequired,
			current: PropTypes.bool.isRequired,
			description: PropTypes.string.isRequired,
			end: PropTypes.string,
			position: PropTypes.string.isRequired,
			start: PropTypes.string.isRequired,
		}),
	).isRequired,
	removeItem: PropTypes.func.isRequired,
	updateItem: PropTypes.func.isRequired,
};

EmployerList.defaultProps = {
	data: [],
};
