import React, { Component } from "react";
import _ from "lodash";
import { Route } from "react-router-dom"

import Layout from "maiku.net/components/ui/layout";
import SectionHeader from "maiku.net/components/ui/admin/section-header";
import PageTitle from "maiku.net/components/ui/page-title";
import Skills from "maiku.net/components/ui/admin/skills";
import About from "maiku.net/components/ui/admin/about";
import Info from "maiku.net/components/ui/admin/info";
import Facts from "maiku.net/components/ui/admin/facts";
import Education from "maiku.net/components/ui/admin/education";
import Employment from "maiku.net/components/ui/admin/employment";

import base from "maiku.net/base";

export default class Admin extends Component {

    state = {
        section: "about",
        data: {
        }
    }

    componentWillMount() {
        this.ref = base.syncState(`maiku-net/data`,
            {
                context: this,
                state: "data",
                isNullable: true,
            });
    }

    componentWillUnmount() {
        base.removeBinding(this.ref);
    }

    addSkill = skill => {
        const skills = !this.state.data.skills
            ? [].concat(skill)
            : this.state.data.skills.concat(skill)

        this.setState({ data: { skills } })
    }

    removeSkill = skill => {
        const skills = this.state.data.skills.filter(item => item !== skill);
        this.setState({ data: { skills } })
    }

    updateSkill = update => {
        //-- find the original skill
        const skill = this.state.data.skills.find((item) => item._id === update._id);

        //-- update the original skill with the update values
        const result = Object.assign({}, { ...skill, ...update });

        //-- update the skill object
        const skills = this.state.data.skills.filter(item => item !== skill).concat(result);

        this.setState({ data: { skills } });
    }

    updateAboutMe = data => {
        this.setState({ data: { about: data } })
    }

    addInfo = information => {
        const info = !this.state.data.info
            ? [].concat(information)
            : this.state.data.info.concat(information)

        this.setState({ data: { info } })
    }

    updateInfo = update => {
        const information = this.state.data.info.find((item) => item._id === update._id);
        const result = Object.assign({}, { ...information, ...update })
        const info = this.state.data.info.filter(item => item !== information).concat(result);

        this.setState({ data: { info } });
    }

    removeInfo = information => {
        const info = this.state.data.info.filter(item => item !== information);
        this.setState({ data: { info } })
    }

    //-- facts
    addFact = fact => {
        const facts = !this.state.data.facts
            ? [].concat(fact)
            : this.state.data.facts.concat(fact)

        this.setState({ data: { facts } })
    }

    removeFact = fact => {
        const facts = this.state.data.facts.filter(item => item !== fact);
        this.setState({ data: { facts } })
    }

    updateFact = update => {
        const fact = this.state.data.facts.find((item) => item._id === update._id);
        const result = Object.assign({}, { ...fact, ...update })
        const facts = this.state.data.facts.filter(item => item !== fact).concat(result);

        this.setState({ data: { facts } });
    }

    addEmployer = employer => {
        const employment = !this.state.data.employment
            ? [].concat(employer)
            : this.state.data.employment.concat(employer);

        this.setState({ data: { employment }})
    }

    removeEmployer = employer => {
        const employment = this.state.data.employment.filter(item => item !== employer);
        this.setState({ data: { employment } })
    }

    updateEmployer = update => {
        const employer = this.state.data.employment.find((item) => item._id === update._id);
        const result = Object.assign({}, { ...employer, ...update })
        const employment = this.state.data.employment.filter(item => item !== employer).concat(result);

        this.setState({ data: { employment } });
    }

    addProject = project => {
        console.log(project, "add project");
    }

    removeProject = project => {
        console.log(project, "remove project");
    }

    updateProject = update => {
        console.log(update, "update project");
    }

    addEducation = school => {
        const education = !this.state.data.education
            ? [].concat(school)
            : this.state.data.education.concat(school);

        this.setState({ data: { education }})
    }

    removeEducation = school => {
        const education = this.state.data.education.filter(item => item !== school);
        this.setState({ data: { education } })
    }

    updateEducation = update => {
        const school = this.state.data.education.find((item) => item._id === update._id);
        const result = Object.assign({}, { ...school, ...update })
        const education = this.state.data.education.filter(item => item !== school).concat(result);

        this.setState({ data: { education } });
    }

    isToggled(name){
        const tokens = this.props.location.pathname.split("/");
        return tokens[tokens.length -1] === name;
    }

    render() {
        return (
            <Layout>
                <div className="content-wrap">
                    <div id="feedback" className="inner-content">

                        <div className="container-fluid nopadding">

                            <div className="row nopadding">
                                <div className="col-md-3 nopadding"></div>
                                <div className="col-md-9 nopadding">

                                    <PageTitle
                                        name="Administration"
                                        origin="left"
                                        duration="600"
                                        delay="100"
                                        distance="50px"
                                    />

                                    <section className="inner-section feedback feedback-light bg-color01" data-section="feedback">

                                        <div className="padding-50">

                                            <div className="row">
                                                <div>
                                                    <div className="dividewhite2"></div>
                                                    <SectionHeader
                                                        path={this.props.location.pathname}
                                                        toggled={this.isToggled("about")}
                                                        name="about"
                                                    />
                                                    <SectionHeader
                                                        path={this.props.location.pathname}
                                                        toggled={this.isToggled("info")}
                                                        name="info"
                                                    />
                                                    <SectionHeader
                                                        path={this.props.location.pathname}
                                                        toggled={this.isToggled("facts")}
                                                        name="facts"
                                                    />
                                                    <SectionHeader
                                                        path={this.props.location.pathname}
                                                        toggled={this.isToggled("employment")}
                                                        name="employment"
                                                    />
                                                    <SectionHeader
                                                        path={this.props.location.pathname}
                                                        toggled={this.isToggled("education")}
                                                        name="education"
                                                    />
                                                    <SectionHeader
                                                        path={this.props.location.pathname}
                                                        toggled={this.isToggled("skills")}
                                                        name="skills"
                                                        isEnd={true}
                                                    />
                                                </div>

                                                <Route exact path="/admin/about" 
                                                    component={() => <About
                                                        data={this.state.data.about}
                                                        updateItem={this.updateAboutMe}
                                                    />}
                                                />
                                                <Route exact path="/admin/info"
                                                    component={() => <Info
                                                        data={this.state.data.info ? this.state.data.info : []}
                                                        addItem={this.addInfo}
                                                        removeItem={this.removeInfo}
                                                        updateItem={this.updateInfo}
                                                    />}
                                                />
                                                <Route exact path="/admin/facts"
                                                    component={() => <Facts
                                                        data={this.state.data.facts ? this.state.data.facts : []}
                                                        addItem={this.addFact}
                                                        removeItem={this.removeFact}
                                                        updateItem={this.updateFact}
                                                    />}
                                                />
                                                <Route exact path="/admin/employment"
                                                    component={() => <Employment 
                                                        data={this.state.data.employment ? this.state.data.employment : []}
                                                        addItem={this.addEmployer}
                                                        removeItem={this.removeEmployer}
                                                        updateItem={this.updateEmployer}
                                                        addProject={this.addProject}
                                                        removeProject={this.removeProject}
                                                        updateProject={this.updateProject}
                                                        />}
                                                />
                                                <Route exact path="/admin/education"
                                                    component={() => <Education
                                                            data={this.state.data.education ? this.state.data.education : []}
                                                            addItem={this.addEducation}
                                                            removeItem={this.removeEducation}
                                                            updateItem={this.updateEducation}
                                                        />}
                                                />
                                                <Route exact path="/admin/skills"
                                                    component={() => <Skills
                                                        skills={this.state.data.skills ? this.state.data.skills : []}
                                                        addSkill={this.addSkill}
                                                        removeSkill={this.removeSkill}
                                                        updateSkill={this.updateSkill}
                                                    />}
                                                />
                                                <div className="col-md-12 divider-dynamic"></div>
                                            </div>

                                        </div>

                                        <div className="dividewhite6"></div>
                                    </section>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Layout>
        );
    }
}