import React, { Component } from "react";
import PropTypes from "prop-types";
import { Route } from "react-router-dom";

import Layout from "maiku.net/components/ui/layout";
import SectionHeader from "maiku.net/components/ui/admin/section-header";
import PageTitle from "maiku.net/components/ui/page-title";
import Skills from "maiku.net/components/ui/admin/skills";
import About from "maiku.net/components/ui/admin/about";
import Info from "maiku.net/components/ui/admin/info";
import Facts from "maiku.net/components/ui/admin/facts";
import Education from "maiku.net/components/ui/admin/education";
import Employment from "maiku.net/components/ui/admin/employment";

import base from "maiku.net/base";

class Admin extends Component {
	state = {
		section: "about",
		data: {
			info: [],
		},
	};

	componentWillMount() {
		this.ref = base.syncState("maiku-net/data", {
			context: this,
			state: "data",
			isNullable: true,
		});
	}

	componentWillUnmount() {
		base.removeBinding(this.ref);
	}

	nextOrder = type => (!this.state.data[type] ? 0 : this.state.data[type].length + 1);

	swapValues = (list, aIdx, bIdx) => Object.assign([], list, { [aIdx]: list[bIdx], [bIdx]: list[aIdx] });

	move = (type, item, direction) => {
		const items = this.state.data[type];
		const index = items.indexOf(item);
		const newIndex = index + direction;

		if (newIndex > 0 && newIndex < items.length) {
			const result = this.swapValues(items, newIndex, index);

			this.setState({ data: { [type]: result } });
		}
	};

	moveItem = (type, dragIndex, hoverIndex) => {
		const items = this.state.data[type];

		const result = this.swapValues(items, dragIndex, hoverIndex);
		this.setState({ data: { [type]: result } });
	};

	add = (type, value) => {
		const item = Object.assign({}, value, { order: this.nextOrder(type) });
		const items = !this.state.data[type] ? [item] : this.state.data[type].concat(item);
		this.setState({ data: { [type]: items } });
	};

	remove = (type, value) => {
		const items = this.state.data[type].filter(item => item !== value);
		this.setState({ data: { [type]: items } });
	};

	update = (type, value) => {
		const original = this.state.data[type].find(x => x._id === value._id);
		const update = Object.assign({}, original, value);

		const items = this.state.data[type];
		const result = items.map(item => (item._id !== original._id ? item : update));

		this.setState({ data: { [type]: result } });
	};

	updateAboutMe = data => {
		this.setState({ data: { about: data } });
	};

	addProject = project => {
		console.log(project, "add project");
	};

	removeProject = project => {
		console.log(project, "remove project");
	};

	updateProject = update => {
		console.log(update, "update project");
	};

	isToggled(name) {
		const { location } = this.props;
		const tokens = location.pathname.split("/");
		return tokens[tokens.length - 1] === name;
	}

	render() {
		const { info } = this.state.data;
		return (
			<Layout info={info}>
				<div className="content-wrap">
					<div id="feedback" className="inner-content">

						<div className="container-fluid nopadding">

							<div className="row nopadding">
								<div className="col-md-3 nopadding" />
								<div className="col-md-9 nopadding">

									<PageTitle
										name="Administration"
										origin="left"
										duration={600}
										delay={100}
										distance="50px"
									/>

									<section
										className="inner-section feedback feedback-light bg-color01"
										data-section="feedback"
									>

										<div className="padding-50">

											<div className="row">
												<div>
													<div className="dividewhite2" />
													<SectionHeader toggled={this.isToggled("about")} name="about" />
													<SectionHeader toggled={this.isToggled("info")} name="info" />
													<SectionHeader toggled={this.isToggled("facts")} name="facts" />
													<SectionHeader
														toggled={this.isToggled("employment")}
														name="employment"
													/>
													<SectionHeader
														toggled={this.isToggled("education")}
														name="education"
													/>
													<SectionHeader
														toggled={this.isToggled("skills")}
														name="skills"
														isEnd
													/>
												</div>

												<Route
													exact
													path="/admin/about"
													component={() => (
														<About
															data={this.state.data.about}
															updateItem={this.updateAboutMe}
														/>
													)}
												/>
												<Route
													exact
													path="/admin/info"
													component={() => (
														<Info
															data={this.state.data.info ? this.state.data.info : []}
															add={this.add}
															remove={this.remove}
															update={this.update}
															moveItem={this.moveItem}
														/>
													)}
												/>
												<Route
													exact
													path="/admin/facts"
													component={() => (
														<Facts
															data={this.state.data.facts ? this.state.data.facts : []}
															add={this.add}
															remove={this.remove}
															update={this.update}
															moveItem={this.moveItem}
														/>
													)}
												/>
												<Route
													exact
													path="/admin/employment"
													component={() => (
														<Employment
															data={
																this.state.data.employment
																	? this.state.data.employment
																	: []
															}
															add={this.add}
															remove={this.remove}
															update={this.update}
															addProject={this.addProject}
															removeProject={this.removeProject}
															updateProject={this.updateProject}
														/>
													)}
												/>
												<Route
													exact
													path="/admin/education"
													component={() => (
														<Education
															data={
																this.state.data.education
																	? this.state.data.education
																	: []
															}
															add={this.add}
															remove={this.remove}
															update={this.update}
														/>
													)}
												/>
												<Route
													exact
													path="/admin/skills"
													component={() => (
														<Skills
															skills={
																this.state.data.skills ? this.state.data.skills : []
															}
															add={this.add}
															remove={this.remove}
															update={this.update}
														/>
													)}
												/>
												<div className="col-md-12 divider-dynamic" />
											</div>

										</div>

										<div className="dividewhite6" />
									</section>
								</div>
							</div>
						</div>
					</div>
				</div>
			</Layout>
		);
	}
}

Admin.propTypes = {
	location: PropTypes.object.isRequired,
};

export default Admin;
