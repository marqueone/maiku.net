import React, { Component } from "react";
import _ from "lodash";

import Layout from "maiku.net/components/ui/layout"
import PageTitle from "maiku.net/components/ui/page-title";
import ResumeFact from "maiku.net/components/ui/resume-fact";
import ResumeTimeLineProject from "maiku.net/components/ui/resume-timeline-project";
import ResumeJob from "maiku.net/components/ui/resume-job";
import ResumeSchool from "maiku.net/components/ui/resume-school";
import SkillSet from "maiku.net/components/ui/skill-set";

import base from "maiku.net/base";

export default class Resume extends Component {

    state = {
        data: {
            about: "",
            facts: [],
            info: [],
            employment: [],
            education: [],
            skills: []
        },
        about: "",
        facts: [
            { label: "status", value: "Available" },
            { label: "desired salery", value: "To be Discussed" },
            { label: "education level", value: "Three Year College Diploma" },
            { label: "Job Type", value: "Contract, Full-Time" },
            { label: "Mobility", value: "Willing to Relocate" },
            { label: "Languages", value: "English" },
            { label: "Industry", value: "Application and Web Development" },
            { label: "Specialty", value: "Backend Development" },
            { label: "Hobbies", value: "Photography, Travel, Diving, Cycling, Software Development" }],
        employment: [
            {
                current: true,
                company: "Jolera",
                start: "May 2009",
                end: "February 2017",
                position: "Sr Developer",
                description: "Over a seven-year period I worked as Jolera's Sr Developer working on small to large projects. This would include tasks such as architecting solutions, creating design documentation, writing technical documentation and end user documentation, developing applications and utilities, managing developer tasks and priorities, and managing the development network and software infrastructure. In this period of time I extended my knowledge and ability to manage Windows Servers, to create and manage virtual environments from Citrix VMWare vSphere to Amazon's EC2 platform, as well pursing my knowledge of the .Net Framework and its subframeorks such as ASP.NET MVC, WebAPI and EntityFRamework to .Net Core and its subframeworks.",
                projects: [
                    {
                        name: "Synapsis",
                        role: "Developer",
                        description: "Synapsis was to provide a 'Single Pane of Glass' experience for Jolera customers to view, manage and purchase services.",
                        tech: "Angular 1.x, ReactJS, Bootstrap 3.x, D3, GIT"
                    },
                    {
                        name: "Alerts",
                        role: "Developer",
                        description: "Alerts is a dashboard used to display, filter, sort issues that are pulled from the NAble RMM platform. In addition, the dashboard allows an administrator to customize what issues are viewable and to assign severity types to specific services to assist in identifying problems for service desk techs. In addition to the dashboard alerts uses a C# .net core web api for consuming soap data from NAble and transforming it into a useable and manageable format.",
                        tech: "C#, .NET Core WebAPI 1.0, ReactJS, SQLite3, GIT"
                    },
                    {
                        name: "Decision Viewer",
                        role: "Lead Developer",
                        description: "Decision Viewer is a web application designed to address the increased demand for clearly defined and consolidated situational awareness information to support crisis events and daily operations. Mapping is the DNA of emergency management and the use of ESRI ArcGIS is a corner stone of the “DecisionViewer” solution.",
                        tech: "C#, SharePoint 2013, Identity Framework 3, ASP.NET WEBAPI 2, EntityFramework 6, Angular 1.6, Bootstrap 3.x, SQL Server 2014, Microsoft Azure Cloud Storage, Hangfire, SignalR 3, GIT"
                    },
                    {
                        name: "Time and Materials",
                        role: "Developer / Designer",
                        description: "Created a web application for managing all of the day to day tasks for managing construction sites and clients. The application was based on an existing Access 97 application and functionality was required to be like for like completeness. This functionality included the ability to create invoices, work order, timesheets, material usage and projects. Data from the Access application was then migrated into the new SQL 2012 server and the Access 97 application was then decommissioned. ",
                        tech: "C#, EntityFramework 6, SQL Server 2012, Bootstrap 3.x, Access 97 GIT"
                    },
                    {
                        name: "Halton Intranet Portal",
                        role: "Developer",
                        description: "Implemented the Halton region intranet application on their on premise SharePoint 2013 environment, while creating custom webparts while utilizing Angular to control dynamic content.",
                        tech: "C#, SharePoint 2013, Angular 1.x, GIT"
                    },
                    {
                        name: "Community Stakeholder Network (CSN)",
                        role: "Developer",
                        description: "Assisted with the development of a custom SharePoint 2013 web application for assisting in disaster and emergency management. ",
                        tech: "C#, SharePoint 2013, AWS EC2, SQL Server 2012, ESRI Maps, GIT"
                    },
                    {
                        name: "The Life Institute",
                        role: "Developer / Maintainer",
                        description: "The Life Institute is a web application allowing users to register and to enroll in classes provided by the University of Ryerson for individuals 50+. Maintenance and minor development was done for this application after taking the project over from another development company.",
                        tech: "PHP 4, MySQL, nginx"
                    },
                    {
                        name: "Pulse Pin",
                        role: "Lead Developer",
                        description: "The Pulse Pin applications were a disaster management application platform developed for the USC Annenberg School for Communication and Journalism. The Web application would allow administrators to send message and alerts to students in the event of an emergency and to allow students to send messages to the system alerting other users of potential threats and problems.",
                        tech: "C#, ASP.NET MVC 3, ASP.NET WebAPI 2, SQL Server 2008, iOS 6, Objective-C 2"
                    },
                    {
                        name: "Child Data Interface (CDI)",
                        role: "Lead Developer / Architect",
                        description: "The Child Data Interface project is a multi-tiered web application designed to assist Plan International Canada to manage their child sponsorship content. The application allows them to download content from services provided by Plan International, validate that content is correct and appropriate for dissemination, print in house content and to provide content to 3rd party print shops. The web application is supported by Windows Services used for downloading content, and the output of content to their appropriate types be it printed media in house, or packaged to be printed at an external print house.",
                        tech: "C#, SQL Server 2008, Windows Services, EasyPDF SDK, ASP.NET MVC2, SVN"
                    },
                    {
                        name: "IOM",
                        role: "Developer",
                        description: "IOM was a platform developed to allow World Vision Canada, to create and manage fundraising sites for any type of event or cause.",
                        tech: "C#, ASP.NET, SQL Server 2005"
                    },
                    {
                        name: "User Provisioning",
                        role: "Developer / Architect",
                        description: "User Provisioning was a project that was developed to allow on premise SharePoint 2007 - 2013 clients to manage users without needing to access their domains manually, and to allow users to manage their own passwords. The application would allow users to sign up for windows accounts, which could be approved or denied by a SharePoint administrator, and allow users to recover, reset and unlock their accounts without the need to contact an administrator.",
                        tech: "C#, ASP.NET MVC1/2, SQL Server 2005, SharePoint 2007 - 2013, Active Directory"
                    },
                    {
                        name: "Various In-House Utilities",
                        role: "Developer",
                        description: "Over a 7-year period, several utilities were created on an as needed basis to solve various business problems. Most of these utilities were to facilitate reporting data from data sources that could not be directly accessed by either Sql Server or Mysql databases. Some of these would include importing of data from Monitis monitoring, and Barracuda hardware solutions.",
                        tech: "C#, EntityFramework, Python, Sql Server, MySql"
                    },
                ]
            },
            {
                current: false,
                company: "Bell Canada",
                start: "September 2007",
                end: "May 2009",
                position: "Programmer Analyst",
                description: "While at Bell Canada, I worked as a programmer analyst working on primarily one large internal project that was to be used by the Bell Technicians for accessing information about specific systems required for the day to day management of their land line infrastructure. Occasionally smaller projects would be assigned for ETLs in the eFRONT reporting platform.",
                projects: [
                    {
                        name: "Unified Desktop",
                        description: "Created the architecture for a legacy system unification application. The goal of the application was to unify all legacy applications, black screen mainframe applications, and legacy windows desktop and web applications under one central application. This was done by exposing existing applications via Java Web Services, and unifying them through an ASP.NET web application. Through this process of unifying the existing applications, there was also the requirement to expose telephone hardware as well as a service which would require interfacing directly with DMS hardware.",
                        tech: "C#, WCF, ASP.NET, Java, SOAP, SVN"
                    },
                    {
                        name: "Financial Forecasting Module",
                        description: "Developed a financial forecasting module for an in-house application for forecasting bell and sub-contractor rates over a 1 to n year period.",
                        tech: "VB.NET, SQL Server 2005, SVN"
                    }
                ]
            },
            {
                current: false,
                company: "Exact-IT",
                start: "June 2007",
                end: "September 2007",
                position: "Jr Microsoft Systems Developer ",
                description: "Developing Crystal Reports, Windows batch scripts (WIL) for SQL Server 2005 maintenance, T-SQL scripts for the generation of reports and data management",
                projects: []
            },
            {
                current: false,
                company: "World Youth Days 2002",
                start: "October 2000",
                end: "November 2002",
                position: "Web Developer / Web Administrator ",
                description: "Deployed load balanced Apache web servers, Postgresql database servers, and maintained the day-to-day operations of both web and database servers. Developed a PHP multi-lingual translation backend for French, Spanish, Italian, German, Polish, Arabic, Portuguese, Korean, Traditional and Simplified Chinese. Developed and Moderated Forum for five languages. Assisted in developing site wide search engine for all supported languages in the administrative backend.",
                projects: []
            }
        ],
        education: {
            start: "January 2005",
            end: "April 2007",
            school: "HUMBER COLLEGE INSTITUTE OF TECHNOLOGY & ADVANCED LEARNING",
            program: "Computer programmer Analyst / .NET Specialization",
            description: "Specialist in .NET development, object oriented analysis and design, database design and various programming languages for multiple platforms and architectures"
        },
        skills: [
            { type: "language", name: "C# / VB.NET", level: 9 },
            { type: "language", name: "Java", level: 6 },
            { type: "language", name: "Objective-C / Swift", level: 3 },
            { type: "language", name: "Javascript", level: 7 },
            { type: "language", name: "PHP", level: 5 },
            { type: "language", name: "Ruby", level: 2 },
            { type: "language", name: "T-SQL", level: 6 },
            { type: "language", name: "Python", level: 3 },
            { type: "framework", name: "ASP.NET", level: 8 },
            { type: "framework", name: "ASP.NET MVC", level: 8 },
            { type: "framework", name: "ASP.NET WebAPI", level: 5 },
            { type: "framework", name: "EntityFramework", level: 5 },
            { type: "framework", name: ".NET Core", level: 5 },
            { type: "framework", name: "Web Servic / Rest Service / WCF Service", level: 6 },
            { type: "framework", name: "CSS / SASS", level: 5 },
            { type: "framework", name: "Angular 1.x", level: 3 },
            { type: "framework", name: "React", level: 5 },
            { type: "framework", name: "Bootstrap", level: 8 },
            { type: "software", name: "Visual Studio 2008 - 2015", level: 9 },
            { type: "software", name: "Photoshop 3.5 - CC", level: 7 },
            { type: "software", name: "Microsoft Office 97 - 2015", level: 5 },
            { type: "software", name: "CRM Online", level: 5 },
            { type: "software", name: "SQL Server 2000 - 2016", level: 6 },
            { type: "software", name: "Postgresql", level: 5 },
            { type: "software", name: "GIT / SVN", level: 6 },
            { type: "os", name: "Windows 98 - 10 / 2003 - 2012", level: 5 },
            { type: "os", name: "OS X 10.4 - 10.12", level: 8 },
            { type: "os", name: "Linux", level: 6 },
            { type: "os", name: "Solaris", level: 4 },
        ]
    }

    componentWillMount() {
        this.ref = base.syncState(`maiku-net/data`,
            {
                context: this,
                state: "data",
                isNullable: true,
            });
    }

    componentWillUnmount() {
        base.removeBinding(this.ref);
    }

    render() {

        //const facts = this.state.facts;
        //const employment = this.state.employment;
        //const education = this.state.education;
        //const skills = this.state.skills;

        const { info, facts, skills, education, employment } = this.state.data

        return (
            <Layout info={info}>
                <div className="content-wrap" >

                    <div id="resume" className="inner-content">

                        <div className="container-fluid nopadding">

                            <div className="row nopadding">
                                <div className="col-md-3 nopadding"></div>
                                <div className="col-md-9 nopadding">
                                    <PageTitle
                                        name="Resume"
                                        origin="left"
                                        duration={600}
                                        delay={100}
                                        distance="50px"
                                    />

                                    <section className="inner-section light bg-color01">
                                        <div className="padding-50">

                                            <div data-animation-origin="top"
                                                data-animation-duration="200"
                                                data-animation-delay="300"
                                                data-animation-distance="20px">
                                                <h3 className="font-accident-two-light uppercase">Facts About Me</h3>
                                                <div className="dividewhite4"></div>
                                            </div>

                                            <div className="row">
                                                <div className="col-md-12"
                                                    data-animation-origin="top"
                                                    data-animation-duration="400"
                                                    data-animation-delay="600"
                                                    data-animation-distance="30px">
                                                    {facts.map(item =>
                                                        <ResumeFact
                                                            key={item._id}
                                                            label={item.label}
                                                            value={item.fact}
                                                        />
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    </section>

                                    <section id="timeline" className="light inner-section bg-color01">

                                        <div className="padding-50">

                                            <div className=""
                                                data-animation-origin="top"
                                                data-animation-duration="400"
                                                data-animation-delay="400"
                                                data-animation-distance="30px">
                                                
                                                <h3 className="font-accident-two-light uppercase">Professional Timeline</h3>
                                                <h5 className="font-accident-two-normal uppercase subtitle">Working hard and making the success</h5>
                                                <div className="dividewhite1"></div>
                                            </div>

                                            {employment.map(employer =>
                                                <ul
                                                    className="timeline-vert timeline"
                                                    key={employer._id}>
                                                    <ResumeJob
                                                        start={employer.start}
                                                        end={employer.end}
                                                        company={employer.company}
                                                        position={employer.position}
                                                        description={employer.description}
                                                    />
                                                    {_.has(employer, "projects") ? employer.projects.map((project) =>
                                                        <ResumeTimeLineProject
                                                            key={project._id}
                                                            start={project.start}
                                                            end={project.end}
                                                            project={project.name}
                                                            projectRole={project.role}
                                                            description={project.description}
                                                            tech={project.tech}
                                                        />) : null}
                                                </ul>
                                            )}
                                        </div>
                                    </section>

                                    <section id="timeline" className="light inner-section bg-color01">
                                        <div className="padding-50">
                                            <div className=""
                                                data-animation-origin="top"
                                                data-animation-duration="400"
                                                data-animation-delay="400"
                                                data-animation-distance="30px">

                                                <h3 className="font-accident-two-light uppercase">Educational Timeline</h3>
                                                <h5 className="font-accident-two-normal uppercase subtitle">Learning, Growing, Specializing</h5>
                                                <div className="dividewhite1"></div>
                                            </div>

                                            <ul className="timeline-vert timeline">
                                                {education.map(item => 
                                                    <ResumeSchool
                                                        key={item._id}
                                                        start={item.start}
                                                        end={item.end}
                                                        school={item.school}
                                                        program={item.program}
                                                        description={item.description}
                                                    />
                                                )}
                                            </ul>
                                        </div>
                                    </section>

                                    <section id="timeline" className="light inner-section bg-color01">
                                        <div className="padding-50">
                                            <div className=""
                                                data-animation-origin="top"
                                                data-animation-duration="400"
                                                data-animation-delay="400"
                                                data-animation-distance="30px">

                                                <h3 className="font-accident-two-light uppercase">Skills</h3>
                                                <h5 className="font-accident-two-normal uppercase subtitle">Good at stuff, like this</h5>
                                                <div className="dividewhite1"></div>
                                            </div>

                                            <table className="table">
                                                <tbody>
                                                    <tr>
                                                        <td>
                                                            <ul>
                                                                <li><h4>Languages</h4></li>
                                                                {skills.filter(item => item.type === "language").map(item =>
                                                                    <SkillSet 
                                                                        key={item._id} 
                                                                        name={item.name} 
                                                                        level={parseInt(item.level, 10)} 
                                                                    />
                                                                )}
                                                            </ul>
                                                            <ul>
                                                                <li><h4>Software</h4></li>
                                                                {skills.filter(item => item.type === "software").map(item =>
                                                                    <SkillSet 
                                                                        key={item._id} 
                                                                        name={item.name} 
                                                                        level={parseInt(item.level, 10)} 
                                                                    />
                                                                )}
                                                            </ul>
                                                        </td>
                                                        <td></td>
                                                        <td>
                                                            <ul>
                                                                <li><h4>Frameworks</h4></li>
                                                                {skills.filter(item => item.type === "framework").map(item =>
                                                                    <SkillSet 
                                                                        key={item._id} 
                                                                        name={item.name} 
                                                                        level={parseInt(item.level, 10)} 
                                                                    />
                                                                )}
                                                            </ul>
                                                            <ul>
                                                                <li><h4>Operating Systems</h4></li>
                                                                {skills.filter(item => item.type === "os").map(item =>
                                                                    <SkillSet 
                                                                        key={item._id} 
                                                                        name={item.name} 
                                                                        level={parseInt(item.level, 10)}
                                                                    />
                                                                )}
                                                            </ul>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                            <div className="dividewhite6"></div>
                                        </div>
                                    </section>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </Layout>
        );
    }
}